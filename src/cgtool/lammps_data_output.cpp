//
// Created by james on 27/08/15.
//
#include "lammps_data_output.h"
#include "small_functions.h"

#include <cstdio>
#include <stdexcept>

using std::string;

LammpsDataOutput::LammpsDataOutput(const int natoms, const string &filename)
{
    natoms_ = natoms;
    if (openFile(filename))
        throw std::runtime_error(
            "ERROR: Could not open Lammps data file for writing");
}

LammpsDataOutput::~LammpsDataOutput()
{
    closeFile();
}

int LammpsDataOutput::openFile(const string &filename)
{
    backup_old_file(filename);
    file_ = std::fopen(filename.c_str(), "w");
    if (!file_)
        return 1;

    fprintf(file_, "Generated by CGTOOLS : %s\n\n", filename.c_str());
    return 0;
}

int LammpsDataOutput::closeFile()
{
    if (file_)
        fclose(file_);
    if (!file_)
        return 0;
    return 1;
}

int LammpsDataOutput::writeFrame(const Frame &frame)
{
    // Have to multiply all coords by 10 - Gromacs is in A, Lammps in nm

    // Print headers
    fprintf(file_, "        %d atoms\n", frame.numAtoms_);
    fprintf(file_, "        %d bonds\n", 0);
    fprintf(file_, "        %d angles\n", 0);
    fprintf(file_, "        %d dihedrals\n", 0);
    fprintf(file_, "        %d impropers\n\n", 0);

    fprintf(file_, "        %d atom types\n", frame.numAtoms_);
    fprintf(file_, "        %d bond types\n", 0);
    fprintf(file_, "        %d angle types\n", 0);
    fprintf(file_, "        %d dihedral types\n", 0);
    fprintf(file_, "        %d improper types\n\n", 0);

    double box[3];
    for (int i = 0; i < 3; i++)
    {
        box[i] = 10 * frame.box_[i][i] / 2;
    }

    fprintf(file_, "        %8.3f %8.3f    xlo xhi\n", -box[0], box[0]);
    fprintf(file_, "        %8.3f %8.3f    ylo yhi\n", -box[1], box[1]);
    fprintf(file_, "        %8.3f %8.3f    zlo zhi\n\n", -box[2], box[2]);

    fprintf(file_, "Atoms\n");
    for (int i = 0; i < natoms_; i++)
    {
        const Atom &atom = frame.atoms_[i];
        // TODO change 2nd column to actual atom type number
        fprintf(file_,
                " %6d %4d %10.4f %10.4f %10.4f %6d %6.2f %9.5f %9.5f %9.5f "
                "%4.1f %4.1f\n",
                i + 1, i + 1, 10 * atom.coords[0] - box[0],
                10 * atom.coords[1] - box[1], 10 * atom.coords[2] - box[2],
                atom.resnum, atom.charge, 10 * atom.dipole[0],
                10 * atom.dipole[1], 10 * atom.dipole[2], 3.f, 2.7f);
    }

    // TODO Print bond types

    return 0;
}
